version: '3.8'

services:
  # ModelShip API Server
  modelship-api:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: modelship-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://modelship:${POSTGRES_PASSWORD}@postgres:5432/modelship_prod
      - SECRET_KEY=${SECRET_KEY}
      - REDIS_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./storage:/app/storage
      - ./models_cache:/app/models_cache
      - ./logs:/app/storage/logs
    depends_on:
      - postgres
      - redis
    networks:
      - modelship-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: modelship-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=modelship_prod
      - POSTGRES_USER=modelship
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - modelship-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U modelship -d modelship_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Task Queue
  redis:
    image: redis:7-alpine
    container_name: modelship-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - modelship-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: modelship-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./storage/uploads:/var/www/uploads:ro
      - ./storage/exports:/var/www/exports:ro
    depends_on:
      - modelship-api
    networks:
      - modelship-network

  # Background Task Worker (Celery)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: modelship-worker
    restart: unless-stopped
    command: celery -A celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://modelship:${POSTGRES_PASSWORD}@postgres:5432/modelship_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./storage:/app/storage
      - ./models_cache:/app/models_cache
    depends_on:
      - postgres
      - redis
    networks:
      - modelship-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: modelship-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - modelship-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: modelship-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - modelship-network

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: modelship-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - modelship-network

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: modelship-backup
    restart: "no"
    environment:
      - POSTGRES_DB=modelship_prod
      - POSTGRES_USER=modelship
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - modelship-network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  modelship-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 